#+PROPERTY: header-args :tangle (expand-file-name "~/.emacs.d/ek-el-files/ek-helper-functions.el")

* ~add-to-list-multiple~
** definition
#+BEGIN_SRC elisp 
(defun add-to-list-multiple (list to-add)
  "Adds multiple items to LIST.
Allows for adding a sequence of items to the same list, rather
than having to call `add-to-list' multiple times."
  (interactive)
  (dolist (item to-add)
    (add-to-list list item)))
#+END_SRC
** COMMENT usage
*** local binding
#+BEGIN_SRC elisp 
(let ((local-test-list '()))
  (add-to-list-multiple
   'local-test-list
   '("asdf" "asfdvsfv" "adbe"))
  (print-strings-in-a-list local-test-list))
#+END_SRC
*** global-binding
#+BEGIN_SRC elisp 
(setq global-test-list '())

(add-to-list-multiple
 'global-test-list
 '("blueberries cranberries"))
(print-strings-in-a-list '("blueberries cranberries"))
#+END_SRC
* ~remove-nth-element~
#+BEGIN_SRC elisp 
(defun remove-nth-element (nth list)
  (if (zerop nth)
      (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))
#+END_SRC
* ~print-strings-in-a-list~
not really useful, but i want it for demonstration's sake
** definition
#+BEGIN_SRC elisp 
(defun print-strings-in-a-list (list)
  "Print each element of LIST on a line of its own."
  (while list
    (prin1 (concat (car list)))
    (setq list (cdr list))))
#+END_SRC
** COMMENT usage
#+BEGIN_SRC elisp 
(setq animals '("gazelle" "giraffe" "lion" "tiger"))
(print-strings-in-a-list animals)

#+END_SRC
* ~ek/prefix-all-lines~
#+BEGIN_SRC elisp 
(defun ek/prefix-all-lines (pre body)
  (with-temp-buffer
    (insert body)
    (string-insert-rectangle (point-min) (point-max) pre)
    (buffer-string)))
#+END_SRC
* ~ek/which~
#+BEGIN_SRC elisp 
(defun ek/which (bin-name-a)
  "Convenience function to call `which' and replace trailing newline"
  (let* ((sh-command (concat "which " bin-name-a))
	 (bin-path-with-newline (shell-command-to-string sh-command))
	 (regex-trailing-newline "\n$"))
    (replace-regexp-in-string regex-trailing-newline "" bin-path-with-newline)))
#+END_SRC

* ~ek/mkdir-p~
#+BEGIN_SRC elisp 
(defun ek/mkdir (dir-a)
  (unless (file-exists-p dir-a)
    (message (concat "ek/mkdir --> target dir:" dir-a))
    (make-directory dir-a)))
#+END_SRC
