(defun font-exists-p (font)
  "check if font exists"
  (if (null (x-list-fonts font)) nil t))

;; fonts / ligatures
;;
(when (and (window-system)
	   (font-exists-p "Fira Code"))
  (progn
    (when (eq system-type 'darwin)
      (mac-auto-operator-composition-mode))
    (set-frame-font "Fira Code")
    (let ((char-regexp-alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
		   (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
		   (36 . ".\\(?:>\\)")
		   (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
		   (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
		   (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
		   (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
		   (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
		   (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
		   (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
		   (48 . ".\\(?:x[a-zA-Z]\\)")
		   (58 . ".\\(?:::\\|[:=]\\)")
		   (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
		   (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
		   (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
		   (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
		   (91 . ".\\(?:]\\)")
		   (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
		   (94 . ".\\(?:=\\)")
		   (119 . ".\\(?:ww\\)")
		   (123 . ".\\(?:-\\)")
		   (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
		   (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
		   )
		 ))
      (dolist (char-regexp char-regexp-alist)
	(set-char-table-range composition-function-table (car char-regexp)
			      `([,(cdr char-regexp) 0 font-shape-gstring]))))))

